---
import Logo from "./Logo.astro";
import ModalMenu from "./ModalMenu.astro";
import MenuPrincipal from "./MenuPrincipal.astro";
import MenuDerecha from "./MenuDerecha.astro";
---

<header
  id="landing-header"
  class="fixed top-0 z-40 flex items-center justify-between w-full px-10 py-3 text-white"
  data-header-color="blue"
>
  <div class="flex flex-grow basis-0">
    <a href="#"><Logo /></a>
  </div>

  <MenuPrincipal />

  <!-- Nav 2do -->
  <MenuDerecha />

  <ModalMenu />

  <script>
    const menuBtn = document.getElementById("menu-btn");
    const closeBtn = document.querySelector("#close-btn");
    const modalMenu = document.querySelector("#modal-menu");
    const headerEl = document.querySelector("#landing-header") as HTMLElement;

    // Verificar que modalMenu no sea null
    if (modalMenu) {
      // Función para alternar el menú
      const toggleMenu = () => {
        modalMenu.classList.toggle("translate-x-0"); // Mostrar el menú
        modalMenu.classList.toggle("translate-x-full"); // Ocultar el menú
      };

      // Abrir el menú al hacer clic en el botón de menú
      menuBtn?.addEventListener("click", (e) => {
        e.preventDefault();
        toggleMenu();
      });

      // Cerrar el menú al hacer clic en el botón de cerrar
      closeBtn?.addEventListener("click", (e) => {
        e.preventDefault();
        toggleMenu();
      });

      // Opcional: cerrar el menú al hacer clic fuera de él
      document.addEventListener("click", (e) => {
        const target = e.target as HTMLElement | null; // Asegura que sea un HTMLElement
        if (target && !modalMenu.contains(target) && target !== menuBtn) {
          modalMenu.classList.add("translate-x-full"); // Asegura que se cierre
          modalMenu.classList.remove("translate-x-0");
        }
      });
    }

    if (headerEl) {
      // Cambiar estilos del header en scroll
      const threshold = 50;
      window.addEventListener("scroll", () => {
        const isScrolled = window.scrollY > threshold;
        headerEl.classList.toggle("bg-black", isScrolled);
        headerEl.classList.toggle("shadow-md", isScrolled);
        headerEl.classList.toggle("bg-transparent", !isScrolled);
      });

      // Cambiar color del header con IntersectionObserver
      const observerOptions = {
        root: null,
        rootMargin: "0px",
        threshold: 0.1, // Ajusta según el comportamiento deseado
      };

      const changeHeaderColor = (color: string) => {
        headerEl.style.color = color || "";
      };

      const observer = new IntersectionObserver((entries) => {
        entries.forEach((entry) => {
          if (entry.isIntersecting) {
            const color = entry.target.getAttribute("data-header-color") || "";
            changeHeaderColor(color);
          }
        });
      }, observerOptions);

      document
        .querySelectorAll(".landing-section")
        .forEach((section) => observer.observe(section));
    }
  </script>
</header>
